importScripts(
    'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js'
  );
/* eslint-disable no-restricted-globals */
/* eslint-disable no-underscore-dangle */


/* globals workbox */
self.workbox.setConfig({debug: true});
self.workbox.core.setCacheNameDetails({
    prefix: 'albait-rhuma',
    suffix: 'v4',
    precache: 'install-time',
    runtime: 'run-time',
  });
  // Control all opened tabs ASAP

  self.workbox.core.clientsClaim();
  
  /**
   * Use precaching list generated by workbox in build process.
   * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.precaching
   */
  self.workbox.precaching.precacheAndRoute(self.__precacheManifest || []);
  
  /**
   * Register a navigation route.
   * https://developers.google.com/web/tools/workbox/modules/workbox-routing#how_to_register_a_navigation_route
   */
  self.workbox.routing.registerRoute('/index.html', new workbox.strategies.StaleWhileRevalidate());
  
  /**
   * Use runtime cache:
   * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.routing#.registerRoute
   *
   * Workbox provides all common caching strategies including CacheFirst, NetworkFirst etc.
   * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.strategies
   */
  
  /** Handle API requests */
  self.workbox.routing.registerRoute(/\/api\//, new workbox.strategies.NetworkFirst());
  
  /** Handle third party requests */
  self.workbox.routing.registerRoute(
    /^https:\/\/gw\.alipayobjects\.com\//,
    new self.workbox.strategies.CacheFirst(),
  );
  self.workbox.routing.registerRoute(
    /^https:\/\/cdnjs\.cloudflare\.com\//,
    new self.workbox.strategies.CacheFirst(),
  );
  // self.workbox.routing.registerRoute(/.js/, new workbox.strategies.CacheFirst());
  // self.workbox.routing.registerRoute(/.css/, new workbox.strategies.CacheFirst());
  // self.workbox.routing.registerRoute(/.html/, new workbox.strategies.CacheFirst());
  // self.workbox.routing.registerRoute(/\/color.less/, new workbox.strategies.CacheFirst());
  // self.workbox.routing.registerRoute(/\/images\//, new workbox.strategies.CacheFirst());
  
  /** Response to client after skipping waiting with MessageChannel */
  self.addEventListener('message', (event) => {
    const replyPort = event.ports[0];
    const message = event.data;
    if (replyPort && message && message.type === 'skip-waiting') {
      event.waitUntil(
        self.skipWaiting().then(
          () => {
            replyPort.postMessage({
              error: null,
            });
          },
          (error) => {
            replyPort.postMessage({
              error,
            });
          },
        ),
      );
    }
  });
